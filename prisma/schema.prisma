// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    user_id              String              @id @default(uuid())
    name                 String
    email                String              @unique
    password             String
    created_post         Post[]
    favourited_post      FavouritePost[]
    liked_post           LikedPost[]
    commented_post       Comment[]
    liked_comment        LikedComment[]
    CommentReplyOwner    CommentReply[]      @relation(name: "owner")
    CommentReplyTarget   CommentReply[]      @relation(name: "target")
    LikedCommentReply    LikedCommentReply[]
    owner                Follower[]          @relation(name: "UserOwner")
    following            Follower[]          @relation(name: "UserFollowing")
    ReceivedNotification Notification[]      @relation(name: "TargetUser")
    SentNotification     Notification[]      @relation(name: "FromUser")
}

// User_owner_id is like a whole person and User_following_id is the people that 
// the "User_owner_id" follows
model Follower {
    UserOwner         User     @relation(fields: [User_owner_id], references: [user_id], name: "UserOwner")
    User_owner_id     String
    UserFollowing     User     @relation(fields: [User_following_id], references: [user_id], name: "UserFollowing")
    User_following_id String
    createdAt         DateTime @default(now())

    @@id([User_owner_id, User_following_id])
}

model Notification {
    notification_id String           @id @default(uuid())
    TargetUser      User             @relation(fields: [TargetUserId], references: [user_id], name: "TargetUser")
    TargetUserId    String
    FromUser        User             @relation(fields: [FromUserId], references: [user_id], name: "FromUser")
    FromUserId      String
    type            NotificationType
    resourceId      String
    hasViewed       Boolean          @default(false)
    createdAt       DateTime         @default(now())
}

enum NotificationType {
    LIKE_POST
    LIKE_COMMENT
    LIKE_REPLY_COMMENT
    POST
    COMMENT
    COMMENT_REPLY
    FOLLOW
}

model Post {
    post_id   String   @id @default(uuid())
    title     String
    content   String   @db.Text
    createdAt DateTime @default(now())

    User                  User            @relation(fields: [User_user_id], references: [user_id])
    User_user_id          String
    being_favourited_post FavouritePost[]
    being_liked_post      LikedPost[]
    being_commented_post  Comment[]
}

model FavouritePost {
    User         User   @relation(fields: [User_user_id], references: [user_id])
    User_user_id String

    Post         Post   @relation(fields: [Post_post_id], references: [post_id])
    Post_post_id String

    createdAt DateTime @default(now())

    @@id([User_user_id, Post_post_id])
}

model LikedPost {
    User         User   @relation(fields: [User_user_id], references: [user_id])
    User_user_id String

    Post         Post   @relation(fields: [Post_post_id], references: [post_id])
    Post_post_id String

    createdAt DateTime @default(now())

    @@id([User_user_id, Post_post_id])
}

model Comment {
    comment_id String @id @default(uuid())

    User         User   @relation(fields: [User_user_id], references: [user_id])
    User_user_id String

    Post         Post   @relation(fields: [Post_post_id], references: [post_id])
    Post_post_id String

    createdAt DateTime @default(now())
    content   String   @db.Text

    being_replied_comment CommentReply[]
    being_liked_comment   LikedComment[]
}

model LikedComment {
    User         User   @relation(fields: [User_user_id], references: [user_id])
    User_user_id String

    Comment            Comment @relation(fields: [Comment_comment_id], references: [comment_id])
    Comment_comment_id String

    createdAt DateTime @default(now())

    @@id([User_user_id, Comment_comment_id])
}

model CommentReply {
    comment_reply_id String @id @default(uuid())

    User         User   @relation(name: "owner", fields: [User_user_id], references: [user_id])
    User_user_id String

    Comment            Comment @relation(fields: [Comment_comment_id], references: [comment_id])
    Comment_comment_id String

    Target_user    User   @relation(name: "target", fields: [Target_user_id], references: [user_id])
    Target_user_id String

    LikedCommentReply LikedCommentReply[]

    createdAt DateTime @default(now())
    content   String   @db.Text
}

model LikedCommentReply {
    User                          User         @relation(fields: [User_user_id], references: [user_id])
    User_user_id                  String
    CommentReply                  CommentReply @relation(fields: [CommentReply_comment_reply_id], references: [comment_reply_id])
    CommentReply_comment_reply_id String

    createdAt DateTime @default(now())

    @@id([User_user_id, CommentReply_comment_reply_id])
}
